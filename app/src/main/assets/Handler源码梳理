

 public Handler(@Nullable Callback callback, boolean async) {
        if (FIND_POTENTIAL_LEAKS) {
            final Class<? extends Handler> klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&
                    (klass.getModifiers() & Modifier.STATIC) == 0) {
                Log.w(TAG, "The following Handler class should be static or leaks might occur: " +
                    klass.getCanonicalName());
            }
        }
      // 如果是在UI线程中调用myLooper()那没问题因为在ActivityThread的main方法中调用了
      // Looper.prepareMainLooper()这个方法干了些什么呢？内部调用了prepare()在其内部
      // 有这么一段代码 sThreadLocal.set(new Looper())(ThreadLocal是一个创建线程局
      // 部变量的类使用ThreadLocal创建的变量只能被当前线程访问) 这样Looper对象就有了而在
      // 创建looper对象的同时在其构造方法内创建了MessageQueue对象 这样在创建Handler对象
      // 的同时就创建好了Looper和MessageQueue对象同时持有了他们  这只是在UI线程中创建Handler
      // 对象

      // 如果是在工作线程中创建handler的话


        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                "Can't create handler inside thread " + Thread.currentThread()
                        + " that has not called Looper.prepare()");
        }
        mQueue = mLooper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
    }